name: Mobile client - E2E (iOS)

on: [push]

permissions: read-all

env:
  MAESTRO_VERSION: 1.32.0
  XC_SIMULATOR_NAME: iPhone 14
  SERVER_URL: http://127.0.0.1:3000/graphql

jobs:
  run_mobile_client_ios_e2e:
    runs-on: macos-12

    strategy:
      matrix:
        node-version: [19.0.0]

    steps:
      # Setup Docker if runner is macOS
      - name: Setup docker and docker-compose (missing on MacOS)
        run: |
          brew install docker docker-compose

          # Link the Docker Compose v2 plugin so it's understood by the docker CLI
          mkdir -p ~/.docker/cli-plugins
          ln -sfn /usr/local/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose

          colima start --mount-type 9p

      - uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 1

      - name: Set Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 14.2.0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Create Settings.toml
        run: |
          cat <<EOT >> ./server/Settings.toml
          host = "127.0.0.1"
          port = "3000"
          postgres_url = "${{ secrets.CI_POSTGRES_URL }}"
          test_postgres_url = "${{ secrets.CI_TEST_POSTGRES_URL }}"
          redis_url = "${{ secrets.CI_REDIS_URL }}"
          test_redis_url = "${{ secrets.CI_TEST_REDIS_URL }}"
          secret = "${{ secrets.CI_SECRET }}"
          EOT

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Server Dependencies
        run: |
          cargo install --force cargo-make
        working-directory: ./server

      - name: Run Server
        run: |
          cargo make ci > server.log 2>&1 &
          server_pid=$!

          # Wait for server to be ready
          while ! grep -q "Server running at 127.0.0.1:3000" server.log; do
          sleep 5
          done
        working-directory: ./server

      - name: Run iOS Simulator
        run: |
          echo "All valid available device types"
          xcrun simctl list devicetypes

          echo "All valid and available runtimes"
          xcrun simctl list runtimes

          xcrun simctl shutdown all

          echo "Run simulator"
          xcrun simctl boot "${{ env.XC_SIMULATOR_NAME }}" --arch=arm64

      - name: Install Maestro
        run: |
          brew tap facebook/fb
          brew install facebook/fb/idb-companion

          curl -Ls "https://get.maestro.mobile.dev" | bash
          export PATH="$PATH":"$HOME/.maestro/bin"
          maestro -v

      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Yarn
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install React Native dependencies
        run: yarn
        working-directory: ./client-mobile

      - name: Update dependencies
        run: |
          brew upgrade facebook/fb/idb-companion
          yarn upgrade
        working-directory: ./client-mobile

      - name: Run Expo app and tests
        run: |
          export PATH="$PATH":"$HOME/.maestro/bin"
          open -a Simulator > simulator.log 2>&1 &

          # Output Simulator logs for debugging
          cat simulator.log

          # Start Expo and extract the Expo URL
          EXPO_PUBLIC_API_URL=${{ env.SERVER_URL }} yarn ios > expo.log 2>&1 &

          # Wait for Expo to be ready
          timeout=1200  # 20 minutes max
          while ! grep -q 'exp://[0-9a-z.-]*' expo.log && [ $timeout -gt 0 ]; do
            sleep 5
            timeout=$((timeout - 5))
          done

          # Check if Expo started successfully
          if [ $timeout -le 0 ]; then
            echo "Expo did not start within 10 minutes."
            cat expo.log
            exit 1
          fi

          # Extract the Expo URL
          expo_url=$(grep -o 'exp://[0-9a-z.-]*' expo.log)
          echo "Expo is running at $expo_url"

          # Output Expo logs for debugging
          cat expo.log

          # Build the app
          yarn prebuild:ios
          cd ios/
          pod install
          xcodebuild clean -workspace Grocify.xcworkspace -scheme Grocify -sdk iphonesimulator -configuration Debug build ARCHS=arm64

          # Install the app
          app_path=$(find ~/Library/Developer/Xcode/DerivedData/ -name "Grocify.app")
          xcrun simctl install booted $app_path

          # Run e2e tests
          cd ../
          yarn test:e2e
        working-directory: ./client-mobile

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: E2E Report (${{ env.XC_SIMULATOR_NAME }})
          path: |
            ${{ github.workspace }}/*.mp4
            ${{ github.workspace }}/*.png
            ${{ github.workspace }}/report*.xml
            ~/.maestro/tests/**/*
