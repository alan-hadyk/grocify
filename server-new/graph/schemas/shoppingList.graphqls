type ShoppingListIngredient {
  id: ID!
  name: String!
  unit: Unit!
  createdAt: DateTime!
  quantity: Float!
}

type ShoppingListRecipe {
  id: ID!
  title: String!
  description: String
  servingSize: Int!
  amountOfDays: Int!
  ingredients: [RecipeIngredient!]!
  createdAt: DateTime!
}

type ShoppingList {
  id: ID!
  date: DateTime!
  author: User!
  ingredients: [ShoppingListIngredient!]!
  recipes: [ShoppingListRecipe!]!
  createdAt: DateTime!
}

extend type Query {
  shoppingLists: [ShoppingList!]!
  shoppingList(id: ID!): ShoppingList
}

extend type Mutation {
  createShoppingList(input: CreateShoppingListInput!): ShoppingList!
  deleteShoppingList(id: ID!): Boolean
  updateShoppingList(id: ID!, input: UpdateShoppingListInput!): ShoppingList!
}

type ShoppingListIngredientCreateUpdate {
  id: ID!
  quantity: Float!
}

type ShoppingListRecipeCreateUpdate {
  id: ID!
  amountOfDays: Int!
}

input CreateShoppingListInput {
  date: DateTime!
  ingredients: [ShoppingListIngredientCreateUpdate!]
  recipes: [ShoppingListRecipeCreateUpdate!]
}

input UpdateShoppingListInput {
  date: DateTime
  ingredients: [ShoppingListIngredientCreateUpdate!]
  recipes: [ShoppingListRecipeCreateUpdate!]
}